{"version":3,"sources":["components/Card.jsx","pages/CheeseMain.jsx","App.js","serviceWorker.js","index.js"],"names":["CheeseCard","props","state","cheeseId","cheeseName","langauge","language","this","cheese","CheeseNameEn","CheeseNameFr","manufacturerName","ManufacturerNameEn","ManufacturerNameFr","manufacturingType","ManufacturingTypeEn","ManufacturingTypeFr","website","WebSiteEn","WebSiteFr","particulars","ParticularitiesEn","ParticularitiesFr","flavors","FlavourEn","FlavourFr","characteristics","CharacteristicsEn","CharacteristicsFr","ripening","RipeningEn","RipeningFr","categoryType","CategoryTypeEn","CategoryTypeFr","milkType","MilkTypeEn","MilkTypeFr","milkTreatmentType","MilkTreatmentTypeEn","MilkTreatmentTypeFr","rindType","RindTypeEn","RindTypeFr","Card","border","style","width","className","Header","CheeseId","Body","Title","ListGroup","variant","Item","ManufacturerProvCode","FatContentPercent","MoisturePercent","Organic","LastUpdateDate","Footer","Component","CheeseMain","setEnglishLanguage","console","log","setState","setFrenchLanguage","fetchData","bind","cheeseList","fetch","headers","crossDomain","then","res","json","result","CheeseDirectory","Navbar","expand","bg","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","active","NavDropdown","title","onClick","length","map","key","role","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.24d70555.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Card, ListGroup } from \"react-bootstrap\";\n\nclass CheeseCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      cheeseId: this.props.cheeseId,\n      cheeseName: this.props.cheeseName,\n      langauge: this.props.language,\n    };\n  }\n  render() {\n    let cheeseName =\n      this.props.language === \"English\"\n        ? this.props.cheese.CheeseNameEn\n        : this.props.cheese.CheeseNameFr;\n\n    cheeseName = cheeseName === \"\" ? \"Not Available/ indisponible\" : cheeseName;\n\n    let manufacturerName =\n      this.props.language === \"English\"\n        ? this.props.cheese.ManufacturerNameEn\n        : this.props.cheese.ManufacturerNameFr;\n\n    manufacturerName =\n      manufacturerName === \"\" ? \"Not Available/ indisponible\" : manufacturerName;\n\n    let manufacturingType =\n      this.props.language === \"English\"\n        ? this.props.cheese.ManufacturingTypeEn\n        : this.props.cheese.ManufacturingTypeFr;\n\n    let website =\n      this.props.language === \"English\"\n        ? this.props.cheese.WebSiteEn\n        : this.props.cheese.WebSiteFr;\n\n    website = website === \"\" ? \"Not Available/ indisponible\" : website;\n\n    let particulars =\n      this.props.language === \"English\"\n        ? this.props.cheese.ParticularitiesEn\n        : this.props.cheese.ParticularitiesFr;\n\n    particulars =\n      particulars === \"\" ? \"Not Available/ indisponible\" : particulars;\n\n    let flavors =\n      this.props.language === \"English\"\n        ? this.props.cheese.FlavourEn\n        : this.props.cheese.FlavourFr;\n\n    flavors = flavors === \"\" ? \"Not Available/ indisponible\" : flavors;\n\n    let characteristics =\n      this.props.language === \"English\"\n        ? this.props.cheese.CharacteristicsEn\n        : this.props.cheese.CharacteristicsFr;\n\n    characteristics =\n      characteristics === \"\" ? \"Not Available/ indisponible\" : characteristics;\n\n    let ripening =\n      this.props.language === \"English\"\n        ? this.props.cheese.RipeningEn\n        : this.props.cheese.RipeningFr;\n\n    ripening = ripening === \"\" ? \"Not Available/ indisponible\" : ripening;\n\n    let categoryType =\n      this.props.language === \"English\"\n        ? this.props.cheese.CategoryTypeEn\n        : this.props.cheese.CategoryTypeFr;\n\n    categoryType =\n      categoryType === \"\" ? \"Not Available/ indisponible\" : categoryType;\n\n    let milkType =\n      this.props.language === \"English\"\n        ? this.props.cheese.MilkTypeEn\n        : this.props.cheese.MilkTypeFr;\n\n    milkType = milkType === \"\" ? \"Not Available/ indisponible\" : milkType;\n\n    let milkTreatmentType =\n      this.props.language === \"English\"\n        ? this.props.cheese.MilkTreatmentTypeEn\n        : this.props.cheese.MilkTreatmentTypeFr;\n\n    milkTreatmentType =\n      milkTreatmentType === \"\"\n        ? \"Not Available/ indisponible\"\n        : milkTreatmentType;\n\n    let rindType =\n      this.props.language === \"English\"\n        ? this.props.cheese.RindTypeEn\n        : this.props.cheese.RindTypeFr;\n\n    rindType = rindType === \"\" ? \"Not Available/ indisponible\" : rindType;\n\n    return (\n      <Card border=\"primary\" style={{ width: \"100%\" }} className=\"text-center\">\n        <Card.Header>{this.props.cheese.CheeseId}</Card.Header>\n        <Card.Body>\n          <Card.Title>{cheeseName}</Card.Title>\n\n          <ListGroup variant=\"Details\">\n            <ListGroup.Item>\n              Manufacturer Name - {manufacturerName}\n            </ListGroup.Item>\n            <ListGroup.Item>\n              Manufacturer Provincial Code -{\" \"}\n              {this.props.cheese.ManufacturerProvCode}\n            </ListGroup.Item>\n            <ListGroup.Item>\n              Manufacturing Type - {manufacturingType}\n            </ListGroup.Item>\n            <ListGroup.Item>Website - {website}</ListGroup.Item>\n\n            <ListGroup.Item>\n              Fat Content Percentage - {this.props.cheese.FatContentPercent}\n            </ListGroup.Item>\n            <ListGroup.Item>\n              Moisture Percentage - {this.props.cheese.MoisturePercent}\n            </ListGroup.Item>\n            <ListGroup.Item>Particularities - {particulars}</ListGroup.Item>\n            <ListGroup.Item>Flavours - {flavors}</ListGroup.Item>\n            <ListGroup.Item>Characteristics - {characteristics}</ListGroup.Item>\n            <ListGroup.Item>Ripening - {ripening}</ListGroup.Item>\n            <ListGroup.Item>\n              Organic - {this.props.cheese.Organic}\n            </ListGroup.Item>\n            <ListGroup.Item>Category Type - {categoryType}</ListGroup.Item>\n            <ListGroup.Item>Milk Type - {milkType}</ListGroup.Item>\n            <ListGroup.Item>\n              Milk Treatment Type - {milkTreatmentType}\n            </ListGroup.Item>\n            <ListGroup.Item>Rind Type - {rindType}</ListGroup.Item>\n            <ListGroup.Item>\n              Last Updated On - {this.props.cheese.LastUpdateDate}\n            </ListGroup.Item>\n          </ListGroup>\n        </Card.Body>\n        <Card.Footer>{this.props.language}</Card.Footer>\n      </Card>\n    );\n  }\n}\n\nexport default CheeseCard;\n","import React, { Component } from \"react\";\nimport CheeseCard from \"../components/Card\";\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\nimport \"../styles/main.css\";\n\nclass CheeseMain extends Component {\n  constructor(props) {\n    super(props);\n    this.fetchData = this.fetchData.bind(this);\n    this.setEnglishLanguage = this.setEnglishLanguage.bind(this);\n    this.setFrenchLanguage = this.setFrenchLanguage.bind(this);\n\n    this.state = {\n      cheeseList: [],\n      language: \"English\",\n    };\n  }\n\n  componentWillMount() {\n    this.fetchData();\n  }\n\n  fetchData() {\n    fetch(\"canadianCheeseDirectory.json\", {\n      headers: { 'Content-Type': 'application/json' },\n      crossDomain:true,\n    })\n      .then((res) => res.json())\n      .then((result) => {\n        this.setState({ cheeseList: result.CheeseDirectory });\n      });\n  }\n\n  setEnglishLanguage = () => {\n    console.log(\"English\");\n    this.setState({\n      language: \"English\",\n    });\n  };\n\n  setFrenchLanguage = () => {\n    console.log(\"French\");\n    this.setState({\n      language: \"French\",\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar expand=\"lg\" bg=\"dark\" variant=\"dark\" className=\"navStyle\">\n          <Navbar.Brand href=\"/\"> Canada Cheese </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link active href=\"/\">\n                Home\n              </Nav.Link>\n              <NavDropdown active title=\"Language\" id=\"nav-dropdown\">\n                <NavDropdown.Item onClick={() => this.setEnglishLanguage()}>\n                  English\n                </NavDropdown.Item>\n                <NavDropdown.Item onClick={() => this.setFrenchLanguage()}>\n                  French\n                </NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n          </Navbar.Collapse>\n        </Navbar>\n\n        <div className=\"row\">\n          {this.state.cheeseList.length > 0 ? (\n            this.state.cheeseList.map((cheese) => (\n              <div className=\"col-md-4 crd cardStyle\" key={cheese.CheeseId}>\n                {}\n                <CheeseCard cheese={cheese} language={this.state.language} />\n              </div>\n            ))\n          ) : (\n            <section className=\"container alert alert-info\" role=\"alert\">\n              Loading ...\n            </section>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default CheeseMain;\n","import React from \"react\";\nimport \"./App.css\";\nimport CheeseMain from \"./pages/CheeseMain\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return (\n    <div>\n      <CheeseMain />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}